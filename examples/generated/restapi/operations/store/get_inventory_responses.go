package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/toolkit"
)

/*GetInventoryOK successful operation

swagger:response getInventoryOK
*/
type GetInventoryOK struct {

	// In: body
	Payload GetInventoryOKBodyBody `json:"body,omitempty"`
}

// NewGetInventoryOK creates GetInventoryOK with default headers values
func NewGetInventoryOK() GetInventoryOK {
	return GetInventoryOK{}
}

// WithPayload adds the payload to the get inventory o k response
func (o *GetInventoryOK) WithPayload(payload GetInventoryOKBodyBody) *GetInventoryOK {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *GetInventoryOK) WriteResponse(rw http.ResponseWriter, producer toolkit.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*
GetInventoryOKBodyBody get inventory o k body body

swagger:model GetInventoryOKBodyBody
*/
type GetInventoryOKBodyBody map[string]int32

// Validate validates this get inventory o k body body
func (o GetInventoryOKBodyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("getInventoryOK", "body", o); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
