package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/toolkit"

	"github.com/go-swagger/go-swagger/examples/todo-list/models"
)

type FindReader struct {
	formats strfmt.Registry
}

func (o *FindReader) ReadResponse(response client.Response, consumer toolkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewFindDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewFindOK creates a FindOK with default headers values
func NewFindOK() *FindOK {
	return &FindOK{}
}

/*FindOK

OK
*/
type FindOK struct {
	Payload []*models.Item
}

func (o *FindOK) Error() string {
	return fmt.Sprintf("[GET /][%d] findOK  %+v", 200, o.Payload)
}

func (o *FindOK) readResponse(response client.Response, consumer toolkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil {
		return err
	}

	return nil
}

// NewFindDefault creates a FindDefault with default headers values
func NewFindDefault(code int) *FindDefault {
	return &FindDefault{
		_statusCode: code,
	}
}

/*FindDefault

error
*/
type FindDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the find default response
func (o *FindDefault) Code() int {
	return o._statusCode
}

func (o *FindDefault) Error() string {
	return fmt.Sprintf("[GET /][%d] find default  %+v", o._statusCode, o.Payload)
}

func (o *FindDefault) readResponse(response client.Response, consumer toolkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}
